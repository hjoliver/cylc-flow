#!/usr/bin/env bash

# THIS FILE IS PART OF THE CYLC SUITE ENGINE.
# Copyright (C) NIWA & British Crown (Met Office) & Contributors.
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

#------------------------------------------------------------------------------
# Wrapper script to support multiple Cylc versions installed on the same host.
# Currently handles Conda and Python virtual environments.
#
# INSTALL AND CONFIGURE THE WRAPPER
#----------------------------------
# Copy this script as "cylc" into the default $PATH on scheduler and job hosts,
# and modify CYLC_HOME_ROOT(_ALT) below (see "EDIT ME") to point to the parent
# directory of all installed versions.
#
# HOW IT WORKS
#-------------
# Intercept `cylc` commands and re-invoke them with the appropriate cylc-flow
# version, according to location or version information in the environment:
# - 1) $CYLC_HOME if defined, or
# - 2) $CYLC_HOME_ROOT(_ALT)/$CYLC_VERSION
#
# USERS SHOULD:
# - Set CYLC_VERSION to select a specific installed version under the ROOT
# - Set CYLC_HOME in .bashrc (scheduler and job hosts) to select a single
#   version outside of the ROOT location.
# 
# The scheduler writes cylc.flow.__version__ to CYLC_VERSION in task job
# scripts so that jobs see the right version. __version__ only increments with
# releases so CYLC_VERSION cannot be used for fine-grained selection. Git
# branches between releases, for example, all have the same version. Use
# CYLC_HOME to select a venv in your cylc-flow git clone.
#
# CYLC_HOME must be set in .bashrc so that task jobs also see it - otherwise
# they will try to select their CYLC_VERSION.
#
# If USERS set a default CYLC_VERSION in .bashrc it should take an existing
# value first to avoid overiding task job version selection:
# - export CYLC_VERSION=${CYLC_VERSION:-8.0.0}
#
# INSTALLING CYLC RELEASES WITH CONDA
#------------------------------------
# Create environments named cylc-$CYLC_VERSION or cylc-flow-$CYLC_VERSION under
# a root location such as /opt/cylc:
#
# $ conda create -p /opt/cylc/cylc-8.2.0 cylc=8.2.0
# 
# $ ls /opt/cylc
# cylc-8.1.0/
# cylc-8.2.0/
#
# Note you can `pip install` cylc-flow from a git clone into a conda
# environment and then select it by CYLC_VERSION but that will be misleading
# (the code won't actually be the release version). It is better to use Python
# venvs and CYLC_HOME for cylc-flow development and testing.
#
# INSTALLING CYLC-FLOW RELEASES WITH PIP FOR DEVELOPMENT AND TESTING
#-------------------------------------------------------------------
# Create Python virtual environments in-place in your cylc-flow git
# clones and select them using CYLC_HOME in your .bashrc.
#
# Create a new venv and install cylc-flow:
#   $ cd <my-cylc-flow-clone>
#   $ python -m venv venv
#   $ . venv/bin/activate
#   $ pip install -e . 
#
# Set CYLC_HOME in .bashrc to select this venv (see explanation above):
#   $ echo "export CYLC_HOME=$PWD/venv" >> .bashrc
#   $ . .bashrc
#
# You can also `pip install` cylc-flow releases under a common root location
# for CYLC_VERSION based selection, like for conda:
#
#   $ CYLC_HOME_ROOT=$HOME/cylc-flow/releases  # (set in this wrapper too)
#   $ python -m venv $CYLC_HOME_ROOT/cylc-flow-8.0a2
#   $ . $CYLC_HOME_ROOT/cylc-flow-8.0a2/bin/activate
#   $ python -m pip install cylc-flow==8.0a2
# 
# (But there is no need to do this if you have full system releases - i.e. not
# just cylc-flow - installed via conda anyway.)
 
##############################!!! EDIT ME !!!##################################
# Central Cylc conda releases:
CYLC_HOME_ROOT=${CYLC_HOME_ROOT:-/opt}
# User Conda releases:
CYLC_HOME_ROOT_ALT=${CYLC_HOME_ROOT_ALT:-/home/$USER/miniconda3/envs}
# NOTE: users can set CYLC_HOME in their .bashrc to select a non-release conda
# or pip virtual environment (located in a cylc-flow git clone, for example).
###############################################################################

# If CYLC_HOME is not defined, find it using {ROOT} and {VERSION}.
if [[ -z ${CYLC_HOME:-} ]]; then
    CYLC_HOME=$CYLC_HOME_ROOT/cylc  # default symlinked version
    if [[ -n ${CYLC_VERSION:-} ]]; then
        # Look for matching version in root locations
        for ROOT in "${CYLC_HOME_ROOT}" "${CYLC_HOME_ROOT_ALT}"; do
            for NAME in "cylc" "cylc-flow"; do
                if [[ -d $ROOT/${NAME}-$CYLC_VERSION ]]; then
                    CYLC_HOME=$ROOT/${NAME}-$CYLC_VERSION
                    break 2
                fi
            done
         done
    fi
fi
if [[ -d "${CYLC_HOME}/conda-meta" ]]; then
    # Conda
    if [[ -f "${CYLC_HOME}/bin/activate" ]]; then
        # A conda pack installation
        . "${CYLC_HOME}/bin/activate" || exit 1
    else
        # A normal conda environment
        . "$(dirname ${CYLC_HOME})/../etc/profile.d/conda.sh"
        conda activate "$(basename ${CYLC_HOME})" || exit 1
    fi
elif [[ -f "${CYLC_HOME}/bin/activate" ]]; then
    # Python venv
    . "${CYLC_HOME}/bin/activate" || exit 1
else
    echo 1>&2 "ERROR: cylc installation not found in ${CYLC_HOME}"
    exit 1
fi
# The selected Cylc should now be first in $PATH
exec "$(basename "$0")" "$@"
