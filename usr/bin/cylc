#!/usr/bin/env bash

# THIS FILE IS PART OF THE CYLC SUITE ENGINE.
# Copyright (C) NIWA & British Crown (Met Office) & Contributors.
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

#------------------------------------------------------------------------------
# Wrapper script to support multiple Cylc versions installed on the same host.
# Handles Cylc 8 Conda and Python virtual envs, and plain Cylc 7 installations.
#
# WRAPPER INSTALLATION AND CONFIGURATION
#---------------------------------------
# Copy this script as "cylc" into the default $PATH on scheduler and job hosts,
# and modify CYLC_HOME_ROOT(_ALT) below (see "EDIT ME") to point to the parent
# directory of all installed versions.
#
# HOW IT WORKS
#-------------
# Intercept `cylc` commands and re-invoke them with the appropriate cylc-flow
# version, according to location or version information in the environment:
# - 1) $CYLC_HOME if defined, or
# - 2) $CYLC[7]_HOME_ROOT[_ALT]/$CYLC_VERSION
#
# USER INSTRUCTIONS
#------------------
# - Set CYLC_VERSION to select an installed version under the ROOT
#   - this is just the version string, e.g. "8.0.0"
# - Set CYLC_HOME in .bashrc (scheduler and job hosts) to select a
#     specific version outside of the ROOT location
#   - CYLC_HOME should point to a Cylc 8 venv, or a Cylc 7 installation
#     directory, for a specific Cylc version. It must be set in .bashrc so that
#     task jobs see it (otherwise they will try to select via CYLC_VERSION)
# - Do not explicitly select the default "cylc" symlink version.
# 
# The scheduler writes cylc.flow.__version__ to CYLC_VERSION in task job
# scripts so that jobs pick up the same Cylc version as their parent scheduler.
# The__version__ string only increments with releases so CYLC_VERSION cannot be
# used for fine-grained selection between e.g. git working copies between
# releases. Use CYLC_HOME to select a venv in your cylc-flow git clone.
#
# If USERS set CYLC_VERSION in their .bashrc it default to an existing value to
# avoid overiding task job version selection:
# - export CYLC_VERSION=${CYLC_VERSION:-8.0.0}
#
# INSTALLING CYLC RELEASES WITH CONDA
#------------------------------------
# Create environments named cylc-$CYLC_VERSION or cylc-flow-$CYLC_VERSION under
# a root location such as /opt:
#   $ conda create -p /opt/cylc-8.2.0 cylc=8.2.0
# and create a default version symlink "cylc" to the latest version:
#   $ ls /opt/cylc*
#   cylc-8.1.0
#   cylc-8.2.0
#   cylc
#
# Note you can `pip install` cylc-flow from a git clone into a Conda
# environment and then select it by CYLC_VERSION but that will be misleading
# if the code is not the true release version. It may be better to use Python
# venvs and CYLC_HOME for cylc-flow development and testing.
#
# INSTALLING CYLC-FLOW WORKING COPIES WITH PIP FOR DEVELOPMENT AND TESTING
#-------------------------------------------------------------------------
# Create Python virtual environments in-place in your cylc-flow git
# clones and select them using CYLC_HOME in your .bashrc.
#
# Create a new venv and install cylc-flow:
#   $ cd <my-cylc-flow-clone>
#   $ python -m venv venv
#   $ . venv/bin/activate
#   $ pip install -e . 
#
# Set CYLC_HOME in .bashrc to select this venv (see explanation above):
#   $ echo "export CYLC_HOME=$PWD/venv" >> ~/.bashrc
#   $ . ~/.bashrc
#
# Note you can also `pip install` cylc-flow releases under a common root
# location for CYLC_VERSION based selection, like for Conda:
#   $ CYLC_HOME_ROOT=$HOME/cylc-flow/releases  # (set in this wrapper too)
#   $ python -m venv $CYLC_HOME_ROOT/cylc-flow-8.0a2
#   $ . $CYLC_HOME_ROOT/cylc-flow-8.0a2/bin/activate
#   $ python -m pip install cylc-flow==8.0a2
# But there is no need to do this if you have full system releases - not just
# cylc-flow - installed via Conda anyway.
 
##############################!!! EDIT ME !!!##################################
# Central Cylc Conda releases:
CYLC_HOME_ROOT="${CYLC_HOME_ROOT:-/opt}"
# User Conda releases:
CYLC_HOME_ROOT_ALT="${CYLC_HOME_ROOT_ALT:-$HOME/miniconda3/envs}"

# Legacy Cylc 7 locations if needed:
CYLC7_HOME_ROOT="${CYLC7_HOME_ROOT_ALT:-/opt}" 
CYLC7_HOME_ROOT_ALT="${CYLC7_HOME_ROOT_ALT:-$HOME/cylc/cylc-7}" 
###############################################################################

if [[ -z "${CYLC_HOME:-}" ]]; then
    # If CYLC_HOME is not defined find it with CYLC_HOME_ROOT and CYLC_VERSION.
    if [[ -n ${CYLC_VERSION:-} ]]; then
        # Look for matching version in root locations
        for ROOT in "${CYLC_HOME_ROOT}" "${CYLC_HOME_ROOT_ALT}" \
                "${CYLC7_HOME_ROOT}" "${CYLC7_HOME_ROOT_ALT}"; do
            for NAME in "cylc" "cylc-flow"; do
                if [[ -d "${ROOT}/${NAME}-${CYLC_VERSION}" ]]; then
                    CYLC_HOME="${ROOT}/${NAME}-${CYLC_VERSION}"
                    break 2
                fi
            done
        done
    else
        echo 1>&2 "ERROR: CYLC_HOME not defined or found"
        exit 1
    fi
fi
if [[ -d "${CYLC_HOME}/conda-meta" ]]; then
    # A Cylc 8 Conda environment
    if [[ -f "${CYLC_HOME}/bin/activate" ]]; then
        # A conda pack installation
        . "${CYLC_HOME}/bin/activate" || exit 1
    else
        # A normal conda environment
        . "$(dirname "${CYLC_HOME}")"/../etc/profile.d/conda.sh
        conda activate "$(basename "${CYLC_HOME}")" || exit 1
    fi
elif [[ -f "${CYLC_HOME}/bin/activate" ]]; then
    # A Cylc 8 Python venv
    . "${CYLC_HOME}/bin/activate" || exit 1
elif [[ -x "${CYLC_HOME}/bin/cylc" ]]; then
    # A Cylc 7 installation
    exec "${CYLC_HOME}"/bin/"$(basename "$0")" "$@"
else
    echo 1>&2 "ERROR: cylc not found in ${CYLC_HOME}"
    exit 1
fi
# The selected Cylc 8 should now be first in $PATH
exec "$(basename "$0")" "$@"
